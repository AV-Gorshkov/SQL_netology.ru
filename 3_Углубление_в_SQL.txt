--=============== УГЛУБЛЕНИЕ В SQL =======================================

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаёте новую схему с префиксом в --виде фамилии, название должно быть на латинице в нижнем регистре и таблицы создаете --в этой новой схеме, если подключение к локальному серверу, то создаёте новую схему и --в ней создаёте таблицы.

--Спроектируйте базу данных, содержащую три справочника:
--· язык (английский, французский и т. п.);
--· народность (славяне, англосаксы и т. п.);
--· страны (Россия, Германия и т. п.).
--Две таблицы со связями: язык-народность и народность-страна, отношения многие ко многим. Пример таблицы со связями — film_actor.
--Требования к таблицам-справочникам:
--· наличие ограничений первичных ключей.
--· идентификатору сущности должен присваиваться автоинкрементом;
--· наименования сущностей не должны содержать null-значения, не должны допускаться --дубликаты в названиях сущностей.
--Требования к таблицам со связями:
--· наличие ограничений первичных и внешних ключей.

--В качестве ответа на задание пришлите запросы создания таблиц и запросы по --добавлению в каждую таблицу по 5 строк с данными.
  
-- Новая Схема
CREATE SCHEMA schema_countries

--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ

CREATE TABLE "language"(
id_language serial,
"language" VARCHAR (255) NOT NULL UNIQUE,
PRIMARY KEY (id_language))

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ

INSERT INTO "language"("language")
VALUES ('Турецкий'),
	('Немецкий'),
	('Русский'),
	('Испанский'),
	('Французский'),
	('Китайский'),
	('Хинди'),
	('Английский')
	
--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ
	
CREATE TABLE "nationality"(
id_nationality serial,
nationality VARCHAR (255) NOT NULL UNIQUE,
PRIMARY KEY (id_nationality))
	
--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ

INSERT INTO nationality (nationality)
VALUES ('Турки'),
	('Немцы'),
	('Русские'),
	('Испанцы'),
	('Аргентинцы'),
	('Французы'),
	('Китайцы'),
	('Хиндустанцы'),
	('Англичане'),
	('Американцы')

--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ
	
CREATE TABLE country (
id_country serial,
country VARCHAR (255) NOT NULL UNIQUE,
PRIMARY KEY (id_country))

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ
INSERT INTO  country (country)
VALUES ('Турция'),
		('Германия'),
		('Россия'),
		('Испания'),
		('Аргентина'),
		('Франция'),
		('Китай'),
		('Тайвань'),
		('Индия'),
		('Великобритания'),
		('США'),
		('Канада')

--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
	
CREATE TABLE language_nationality (
id_language integer,
id_nationality integer,
PRIMARY KEY (id_language,id_nationality),
FOREIGN KEY (id_language) REFERENCES "language" (id_language)
)

ALTER TABLE language_nationality
ADD CONSTRAINT fk_lan_nat 
FOREIGN KEY (id_nationality) REFERENCES nationality (id_nationality)
	
--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

INSERT INTO language_nationality(id_language, id_nationality)
VALUES  (1,1),
		(2,2),
		(3,3),
		(4,4),
		(4,5),
		(5,6),
		(6,7),
		(7,8),
		(8,9),
		(8,10)

--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ

CREATE TABLE country_nationality (
id_country  integer,
id_nationality integer,
PRIMARY KEY (id_country ,id_nationality),
FOREIGN KEY (id_country ) REFERENCES country (id_country),
FOREIGN KEY (id_nationality) REFERENCES nationality (id_nationality)
)

--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ

INSERT INTO country_nationality(id_nationality, id_country)
VALUES  (1,1),
		(2,2),
		(3,3),
		(4,4),
		(5,5),
		(6,6),
		(7,7),
		(7,8),
		(8,9),
		(9,10),
		(9,11),
		(10,11),
		(10,12)

--- Итоговая таблица
SELECT
	c.country,
	n.nationality,
	l."language"
FROM 	
	country c
LEFT JOIN country_nationality c_n ON c_n.id_country = c.id_country
LEFT JOIN nationality n ON n.id_nationality  = c_n.id_nationality
LEFT JOIN language_nationality l_n ON l_n.id_nationality = n.id_nationality
LEFT JOIN "language" l ON l.id_language = l_n.id_language  


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============


--ЗАДАНИЕ №1 
--Создайте новую таблицу film_new со следующими полями:
--·   	film_name - название фильма - тип данных varchar(255) и ограничение not null
--·   	film_year - год выпуска фильма - тип данных integer, условие, что значение должно быть больше 0
--·   	film_rental_rate - стоимость аренды фильма - тип данных numeric(4,2), значение по умолчанию 0.99
--·   	film_duration - длительность фильма в минутах - тип данных integer, ограничение not null и условие, что значение должно быть больше 0
--Если работаете в облачной базе, то перед названием таблицы задайте наименование вашей схемы.

CREATE TABLE film_new (
film_name VARCHAR (255) NOT NULL,
film_year integer CHECK (film_year > 0),
film_rental_rate numeric(4,2) DEFAULT (0.99),
film_duration integer NOT NULL CHECK (film_duration> 0)
)
 
--ЗАДАНИЕ №2 
--Заполните таблицу film_new данными с помощью SQL-запроса, где колонкам соответствуют массивы данных:
--·       film_name - array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']
--·       film_year - array[1994, 1999, 1985, 1994, 1993]
--·       film_rental_rate - array[2.99, 0.99, 1.99, 2.99, 3.99]
--·   	  film_duration - array[142, 189, 116, 142, 195]

	
INSERT INTO film_new (film_name, film_year,film_rental_rate, film_duration )
	VALUES (
		UNNEST (array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']),			
	    UNNEST (array[1994, 1999, 1985, 1994, 1993]),
		UNNEST (array[2.99, 0.99, 1.99, 2.99, 3.99]),
	    UNNEST (array[142, 189, 116, 142, 195])
	    )
	
--ЗАДАНИЕ №3
--Обновите стоимость аренды фильмов в таблице film_new с учетом информации, 
--что стоимость аренды всех фильмов поднялась на 1.41

UPDATE film_new
SET film_rental_rate = film_rental_rate + 1.41

--ЗАДАНИЕ №4
--Фильм с названием "Back to the Future" был снят с аренды, 
--удалите строку с этим фильмом из таблицы film_new

DELETE FROM film_new
WHERE film_name = 'Back to the Future'

--ЗАДАНИЕ №5
--Добавьте в таблицу film_new запись о любом другом новом фильме

	
INSERT INTO film_new (film_name, film_year,film_rental_rate, film_duration )
	VALUES 
		('Terminator 2', 1991, 3.05, 137)

--ЗАДАНИЕ №6
--Напишите SQL-запрос, который выведет все колонки из таблицы film_new, 
--а также новую вычисляемую колонку "длительность фильма в часах", округлённую до десятых

SELECT 
	*,
	round( (film_duration::NUMERIC) / 60, 1) AS "duration_hour"
FROM
	film_new

--ЗАДАНИЕ №7 
--Удалите таблицу film_new
	
Drop table film_new cascade
