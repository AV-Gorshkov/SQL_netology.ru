--=============== МОДУЛЬ 5. РАБОТА С POSTGRESQL =======================================

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Сделайте запрос к таблице payment и с помощью оконных функций добавьте вычисляемые колонки согласно условиям:

--1.1 Пронумеруйте все платежи от 1 до N по дате платежа

--1.2 Пронумеруйте платежи для каждого покупателя, сортировка платежей должна быть по дате платежа

--1.3 Посчитайте нарастающим итогом сумму всех платежей для каждого покупателя, сортировка должна 
--быть сперва по дате платежа, а затем по размеру платежа от наименьшей к большей

--1.4 Пронумеруйте платежи для каждого покупателя по размеру платежа от наибольшего к
--меньшему так, чтобы платежи с одинаковым значением имели одинаковое значение номера.
--Можно составить на каждый пункт отдельный SQL-запрос, а можно объединить все колонки в одном запросе.

SELECT 
	payment_id,
	customer_id,
	payment_date,
	ROW_NUMBER ()  OVER ( ORDER BY payment_date ) AS "Порядковый номер платежа",
	ROW_NUMBER () OVER (PARTITION BY customer_id ORDER BY payment_date) AS "№платежа покупателя по дате",
	SUM(amount) OVER (partition by customer_id order by payment_date, amount) AS "Сумма платежа нарастающим итогом",
	DENSE_RANK () OVER (PARTITION BY customer_id ORDER BY amount desc ) AS "№платежа покупателя по стоимости"
FROM 
	payment 
ORDER BY customer_id, "№платежа покупателя по стоимости"

--ЗАДАНИЕ №2
--С помощью оконной функции выведите для каждого покупателя стоимость платежа и стоимость 
--платежа из предыдущей строки со значением по умолчанию 0.0 с сортировкой по дате платежа.

SELECT 
	payment_id,
	customer_id,
	payment_date,
	amount,
	CASE 
		WHEN ( LAG (amount, 1) OVER (partition by customer_id order by payment_date)) IS NULL THEN 0.0::numeric
		ELSE ( LAG (amount, 1) OVER (partition by customer_id order by payment_date))
	END	 AS "Предыдущее значение gkfnt;f"
FROM 
	payment 
ORDER BY customer_id

------альтернативный вариант

SELECT 
	payment_id,
	customer_id,
	payment_date,
	amount,
	LAG (amount, 1,0.0::numeric)  OVER (partition by customer_id order by payment_date) AS "Предыдущее значение платежа"
FROM 
	payment 
ORDER BY customer_id


--ЗАДАНИЕ №3
--С помощью оконной функции определите, на сколько каждый следующий платеж покупателя больше или меньше текущего.

SELECT
	customer_id , 
	payment_id ,
	amount,
	LEAD (amount, 1, 0.0::numeric) OVER (partition by customer_id order by payment_date) AS "Следующий платеж",
	amount-	LEAD (amount, 1, 0.0::numeric) OVER (partition by customer_id order by payment_date) AS "Откл. текущего/следующего платежа"
FROM 
	payment 
ORDER BY customer_id

--ЗАДАНИЕ №4
--С помощью оконной функции для каждого покупателя выведите данные о его последней оплате аренды.

SELECT
	customer_id , 
	payment_id ,
	amount,
	payment_date :: date
FROM
	(
	SELECT
			customer_id,
			payment_id,
			amount,
			payment_date ,
			ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY payment_date desc)
	FROM
		payment p) t
WHERE row_number = 1
ORDER BY customer_id


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--С помощью оконной функции выведите для каждого сотрудника сумму продаж за август 2005 года 
--с нарастающим итогом по каждому сотруднику и по каждой дате продажи (без учёта времени) 
--с сортировкой по дате.

SELECT 
	t1.staff_id,
	t1.payment_date ::date,
	s.first_name,
	s.last_name,
	sum(t1.sum_amount),
	t2."sum=2005-08-01"	
FROM 
	(
	SELECT 	
		p.staff_id,
		payment_date ::date,
		sum (p.amount) over( PARTITION BY p.staff_id ORDER BY p.payment_date) AS sum_amount
	FROM 
		payment p
	) t1	
LEFT JOIN staff s ON t1.staff_id = s.staff_id 
LEFT JOIN 
	(
	SELECT
		p.staff_id,
		sum(amount) AS "sum=2005-08-01"	
	FROM 	
		payment p
	WHERE 	date_trunc('MONTH', p.payment_date) ='2005-08-01'
	GROUP BY p.staff_id,date_trunc('MONTH', p.payment_date)
	) t2 
ON t1.staff_id = t2.staff_id 
GROUP BY s.staff_id, t1.staff_id , t1.payment_date ::date,t2."sum=2005-08-01"	
ORDER BY t1.staff_id,t1.payment_date


--Версия №2

SELECT 
	t1.staff_id,
	t1.payment_date::date,
	s.first_name,
	s.last_name,
	t1.sum_amount,
	sum(t1.sum_amount) over( PARTITION BY t1.staff_id ORDER BY t1.payment_date) AS "sum"
FROM 
	(
	SELECT 	
		p.staff_id,
		p.payment_date::date,
		sum(p.amount) AS "sum_amount"
	FROM 
		payment p
	WHERE 	date_trunc('MONTH', p.payment_date) ='2005-08-01'
	GROUP BY p.staff_id, p.payment_date::date
	) t1	
LEFT JOIN staff s ON t1.staff_id = s.staff_id
	

--ЗАДАНИЕ №2
--20 августа 2005 года в магазинах проходила акция: покупатель каждого сотого платежа получал
--дополнительную скидку на следующую аренду. С помощью оконной функции выведите всех покупателей,
--которые в день проведения акции получили скидку


SELECT 
	payment_date,
	customer_id,
	rental_id, 
	t.row_number
FROM 
	(
	SELECT 	
		*,
		ROW_NUMBER () over ( ORDER BY p.payment_date)
	FROM 	
		payment p
	WHERE p.payment_date::date = '2005-08-20') t
WHERE ROW_NUMBER % 100 = 0
	


--ЗАДАНИЕ №3
--Для каждой страны определите и выведите одним SQL-запросом покупателей, которые попадают под условия:
-- 1. покупатель, арендовавший наибольшее количество фильмов
-- 2. покупатель, арендовавший фильмов на самую большую сумму
-- 3. покупатель, который последним арендовал фильм

EXPLAIN	ANALYZE --
WITH cte AS (
	SELECT 
		c.country_id,
		c.country,
		cu.customer_id,
		concat_ws(' ', cu.last_name, cu.first_name)  AS fio
	FROM 
		country c 
	LEFT JOIN city ci ON ci.country_id  = c.country_id 
	LEFT JOIN address a ON a.city_id  = ci.city_id 
	LEFT JOIN customer cu ON cu.address_id  = a.address_id 
	)
SELECT 	
	c.country_id,
	c.country,
	temp_t1."1_fio",
	temp_t1."1_count_film",
	temp_t2."2_fio",
	temp_t2."2_total_amount",
	temp_t3."3_fio",
	temp_t3.rental_date::date AS "3_last_rental_date"
FROM 
	country c
LEFT JOIN
	(
	SELECT 
		t2.country_id,
		t2."2_fio"	,
		t2."2_total_amount"
	FROM 
		(
		SELECT 	
			cte.country_id,
			p.customer_id , 
			cte.fio AS "2_fio"	,
			sum(p.amount) AS "2_total_amount",
			ROW_NUMBER  () OVER (PARTITION BY  cte.country_id ORDER BY sum(p.amount) desc) AS "index_amount"
		FROM
			payment p 
		LEFT JOIN cte ON p.customer_id = cte.customer_id
		GROUP BY p.customer_id, cte.country_id, cte.fio
		) t2
	WHERE t2."index_amount" = 1
	) temp_t2
ON c.country_id = temp_t2.country_id
LEFT JOIN 
	(
	SELECT 
		t1.country_id,
		t1."1_fio"	,
		t1."1_count_film"
	FROM 
		(
		SELECT 	
			cte.country_id,
			r.customer_id , 
			cte.fio AS "1_fio",	
			count(r.rental_id) AS "1_count_film",
			ROW_NUMBER  () OVER (PARTITION BY cte.country_id ORDER BY count(r.rental_id)desc) AS "index_rental"
		FROM
			rental r
		LEFT JOIN cte ON r.customer_id = cte.customer_id
		GROUP BY r.customer_id, cte.country_id, cte.fio	
		) t1
	WHERE t1."index_rental" = 1	) temp_t1
ON temp_t1.country_id = c.country_id
LEFT JOIN 
	(
	SELECT
		t3.country_id,
		t3.fio AS "3_fio",
		t3.rental_date::date
	FROM 
		(
			SELECT
				*
			FROM (
				SELECT 
					cte.country_id,
					cte.fio,
			   		r.rental_date,	
			   		ROW_NUMBER() OVER (PARTITION BY cte.country ORDER BY r.rental_date desc) AS "index_rental_date"
				FROM 
					rental r
				LEFT JOIN cte ON r.customer_id = cte.customer_id
				) t
			WHERE t."index_rental_date" = 1 )  t3
	) temp_t3
ON temp_t3.country_id = c.country_id
ORDER BY c.country_id





